Início: Aula 01 

Linguagem C é linguagem de alto nível, pois abrange os processadores, acima do assembly, portanto se caracteriza como linguagem de alto nível.
No entanto, foi desenvolvida para ser logo no nível acima, é uma linguagem de alto desempenho por ser compilada.

    Bibliotecas:

        <stdio.h> - Principal para qualquer programa.


    Função:

        int main(){} - Deve sempre no final do programa incrementar o [return 0].

        int main(void) {} - Não é necessário incrementar o [return 0] no final do programa.
        
________________________________________________________________

Aula 02 DEBUGAR:

Encontrar erros semânticos, erros semânticos são diferentes dos erros de sintáxe, pois é da responsabilidade do programador, o programa não tem capacidade de indentificar. Erro de sintáxe é a estrutura do comando, que o próprio programa irá indentificar e avisar.

Não é possível debugar arquivos-fonte isolados. É necessário criar todo o projeto.

Ajuda muito para corrigir um programa, é um esquema PASSO-A-PASSO das linhas.
________________________________________________________________
Aula 02

Para [PRINTF]
Especificadores de formato 

        Identificador                   Formato

        %d ou %i                        Inteiro decimal
        %c                              Caracter simples
        %s                              Cadeia de Caracter
        %f                              Ponto Flutuante (decimal)
        %e                              Ponto Flutuante (notação exponencial)
        %g                              Usa o %f ou o %e mais curto
        %lf                             Tipo double
        %u                              -
        %o                              -
        %x                              Números inteiros em base hexadecimal
        .<num>                          Especifica quantos dígitos serão impressos após vírgula Exemplo: "%.2f"
================================================================
Sequência de escape
        Escape                          Descrição

        \a                              Toca um bipe, alarme sonoro padrão do sistema
        \b                              Backspace
        \n                              Quebra de linha
        \t                              Tabulação horizontal(TAB)
        \r                              Retorna ao início da linha
        \0                              Caractere nulo
        \v                              Tabulação vertical
        
        \\                              Caractere \
        \'                              Caractere '
        \"                              Caractere "
        \?                              Caractere ?
        \123                            Caractere relacionado ao código 123 em octal (ASCII) - 123 é um exemplo na tabela 
        \x12                            Caractere relacionado ao código 12 em hexadecimal (ASCII) -x12 é um exemplo na tabela
        %%                              Caractere %
_____________________________________________________________
Para [SCANF]

Sintaxe:

    scanf(<formato especificado>, &<variável1>, &<variavel2>);  LEMBRAR DO "&"!

            **No momento em que especificar o formmato da variável, e houver mais de uma variável é necessário especificar o formato na mesma quantidade de variáveis, o programa irá ler respectivamente, formato1, formato2, variavel1, variavel2, assim sucessivamente.**

os Especificadores de formato são os mesmos do [PRINTF], exceto;

        chars - O chars lê todos os dados digitados, exceto os especificados em "chars".

        Identificador                       Formato

        %d                  bool           Booleano (Verdadeiro = 1 ou Falso = 0)
        %d ou %i            int            Inteiro decimal         
        %c                              Caracter simples
        %s                  char           Cadeia de Caracter
        %f                  float          Ponto Flutuante (decimal)
        %e                              Ponto Flutuante (notação exponencial)
        %g                              Usa o %f ou o %e mais curto
        %lf                 double            Tipo double
        %u                              -
        %o                              -
        %x                              Números inteiros em base hexadecimal

        Exemplo:

            #include <stdlib.h>

            int main() {

                int idade = 0;
                int ano = 1950;                    

                printf("Informe a idade e o ano que desejar:\n");
                scanf("%d %d", &idade, &ano);

                printf("A idade digita eh, %d.\n", idade);
                printf("O ano informado eh, %d.\n", ano);
        
            system("pause");
            }
_____________________________________________________________
Aula 03

Como na pseudo-linguagem, é necessário primeiramente fazer a declaração da variável.

            <tipo> <nome>

Nomenclatura:
    -Não pode iniciar com Números.
    -Não pode caracteres especiais.
    -Não pode haver espaço.
 
 Operadores:
                Mesmo método do Portugol.

    = Atribuição
    == Comparação (igual)

    Para constantes:
        A diretiva "#define", cria-se um identificador para um dado de qualquer tipo.

            Exemplo de uma declaração de constante, faz com que não permita a modificação do valor:
                
                 #define <nome> <valor>
________________________________________________________________
Aula 04

Operadores:

    Soma: +     |       Subtração: -       |      Multiplicação: *      |      Divisão: /     |     Resto de divisão inteira: %

Obs: Existe precedência entre operadores. Multiplicação, Divisão, primeiro que soma e subtração. Entre parênteses "()" tem a maior precedência dos demais. Como na matemática.

    Operadores de atribuição:

    ++ : Incremento de 1 unidade.
    -- : Decremento em 1 unidade.
    += : Incremento Genérico
    -= : Decremento Genérico
    *= : Atribuição com Multiplicação
    /= : Atribuição com Divisão

            Igualmente com o Portugol Studio.
_____________________________________________________________
Aula 05

    Condicionante IF.
        Como no Portugol Studio, utiliza-se os mesmos operadores relacionais:
        _____________________________________________________________
       | Maior: >                |       Menor: <                   |
       | -----------------------------------------------            |
       | Maior ou igual: >=      |       Menor ou igual: <=         |
       | -----------------------------------------------            |
       | Igual: ==               |       Diferente: !=              |
       |____________________________________________________________|
    
    Operadores Condicionantes juntamente com Operadores Lógicos:

        # Conjunção: 
            No Portugol Studio, utilizamos o operador "e". Só é verdadeiro quando tudo for verdadeiro. Em C, utiliza "&&"

        # Disjunção:
            No Portugol Studio, utilizamos o operador "ou". Só é verdadeiro se um ao menos um caso for verdadeiro. Em C, utiliza "||"

        # Negação:
            No Portugol Studio, utilizamos o operador "!=". Só é verdadeiro quando tudo for falso. Em C, utiliza "!"

        _____________________________________________________________
       |            E            |              &&                  |
       | -----------------------------------------------            |
       |            OU           |              ||                  |
       | -----------------------------------------------            |
       |         NEGAÇÂO         |              !                   |
       |____________________________________________________________|

       Utilização do ELSE:

       Do mesmo formato que no Portugol Studio.

       Se - IF
       Senao SE - Else IF
       Senao - Else

       # Lembrando que a identação é a seguinte:
        ______________________________
       | if ( <condição> ) {          |
       |     <procedimento>           |
       | } else if ( <condição> ) {   |
       |     <procedimento>           |
       | } else {                     |
       |     <procedimento>           |
       | }                            |
       |______________________________|
_____________________________________________________________
Aula 06

    Condicionante SWITCH - CASE (Escolha-Caso)

        No memso funcionamento do Portugol Studio. Comparação da variável, e entrada no bloco.
        
        Logo: 

        ____________________________________
        |   SWITCH      |   Escolha         |
        |   CASE        |   Caso            |
        |   BREAK       |   Pare            |
        |   DEFAULT     |   Caso contrario  |
        |___________________________________|

            Ex:
               ______________________________________
              |  switch(<var>) {                     |
              |      case <v1> :                     |
              |          <bloco_de_comandos1>        |
              |          break;                      |
              |                                      |
              |      case <v2> :                     |
              |          <bloco_de_comandos2>        |
              |          break;                      |
              |      ...                             |
              |      case <vN> :                     |
              |          <bloco_de_comandosN>        |
              |          break;                      |
              |                                      |
              |      default:                        |
              |          <bloco_de_comandos_padrão>  |
              |          break;                      |
              |  }                                   |
              |______________________________________|
____________________________________________________________

system("cls"); - limpa() - limpar a tela.

Utilização do [return 0;]:
___________________________________________________________________________________________________________
|int main() {                                                                                              |
|                                                                                                          |
|    //programa//                                                                                          |
|                                                                                                          |
|    return 0;  -- É necessário incrementar o return 0; pois a função main() é int, logo o retorno é zero. |
|}                                                                                                         |
|__________________________________________________________________________________________________________|

    Laço de repetição:

        FOR - (para):

            for (inicialização; condição; incremento/decremento) {
                //processo//
            }
___________________________________________________________________________________________________________
        While - enquanto;

            while (condição) {
                //processo//
            }
___________________________________________________________________________________________________________
        Do while - Faça enquanto:

            do {
                //processo//
            } while (condição);
___________________________________________________________________________________________________________

Funções

    int soma (int a, int b ) {
        
        //processo//
    }

___________________________________________________________________________________________________________

    Vetores
        
    Como no Portugol Studio, declara a variável ex.(int = var[10])

___________________________________________________________________________________________________________

    Matrizes        

    Como no portugol studio. Dados Organizados em Linhas e Colunas - Planilha
    
    - Armazena dados de um único tipo.
    - Acesso aos dados através de índices.
    - Laços de repetição são essenciais no acesso.
        1 laço para linha - Outro laço para coluna.

    var[linha][coluna]

            ex; int matriz[4][3] = {
    
                    {1,2,3},
                    {4.5.6},
                    {7,8,9},
                    {10,11,12},
                }
___________________________________________________________________________________________________________

    Recursividade:

        (Trabalhar com busca), quando um dos seus passos consiste na chamada de uma nova execução do mesmo procedimento.
        Ou seja, algo que se repete, se refere a uma função, ou um determinado comando, puxando a linha. até criar uma condição de parada. Execução de um procedimento de maneira repetitiva. Repetição sucessiva.

        Sequencia recursiva: São obitidas a partir dos termos anteriores: Padronizado

        Ex: 02,05,08,11 - Pega o número anterior e soma 03.

        Desvantagem, consome muita memoria ram, quando é acioanda, acumula o espaço de memoria, não libera.

            Percorrer uma árvore binária. 

           Exemplo de recursividade cálculo do fatorial de n:

            int fatorial (int n) {
                if (n<=1)
                    return 1;
                else
                    return n * fatorial (n-1);
            }

        
___________________________________________________________________________________________________________

Variáveis STATIC

    Preservam seu valor, enquanto o programa estiver rodando, não sendo inicializadas em novas chamadas de uma função.

    #include <stdio.h>
    int fun()
    {
        
    static int count =0;
    count++;
    return count;
    }

    int main ()
    {
    printf("%d",fun());
    printf("%d", fun());
    return 0 
    }
___________________________________________________________________________________________________________

Variável 
    
    "const" ou #define

   - #define não precisa declarar a variável e nem o sinal de atribuição "="
   - const é necessário a declaração da variável e atribuir o sinal de atribuição "="

Exemplo:
    #define ICMS 0.18;
    const float ICMS2 = 0.19, ICMS3 = 0.15;

___________________________________________________________________________________________________________

Estruturas - struct

    Manipulação de strings
        Utilizando a biblioteca <string.h>

        Variáveis - strings - Cadeia

            char nome[10]; // Um vetor com tamanho definido.
            char nome[] = "Logica"; // Variável já inicializada.
____________________________________

        Função para manipulação - STRLEN - diz o tamanho da Cadeia

        char str[] = "Programacao em C";
        int tamanho = strlen(str); // Faz a leitura de quantos caracteres tem na variável str.
        printf("Tamanho da string é de %d caracteres \n", tamanho);
______________________________________

        STRCPY - cópia de conteúdo

        char origem[] = "Programacao";
        char destino[50];
        strcpy(destino, origem); // 1° Para onde vai 2° qual é a origem.
        printf("Resultado Cópia da string: %s\n", destino);
        strcpy(destino, "Segundo exemplo");
        printf("Resultado Cópia da string: %s\n", destino);
______________________________________

        STRCAT - Concatenar

        char str1[] = "Programação";
        char str2[] = " em C";
        strcat(str1, str2);
        printf("Concatenação das strings: %s\n", str1);
        printf(strcat(str1," Usando VSCODE));
______________________________________

        STRCMP - Comparação

        char str1[] = "Desenvolvimento";
        char str2[] = "Desenvolvimento";

        if (strcmp(str1, str2) == 0)
        {
            printf("As strings são iguais.\n");
        }
        else
        {
            printf("As strings são diferentes.\n");
        }
___________________________________________________________________________________________________________

    Sintaxe 

        struct{

         int n1;
         char nome[100]
         float valor;
         double percent;
        } <NOME_da_estrutura>


___________________________________________________________________________________________________________

    Typedef

        Palavra reservada que define novos tipos de dados com nomes personalizados. 
        Funciona como uma forma de renomeear tipos já existentes - Ex: int [->] inteiro.
        Aplicada a qualquer tipo de daods, porem mais utilizadas em Structs.
    
    Exemplo:
        #include <stdio.h>
        typedef int inteiro;

        int main (void){
        inteiro num1;

        }
___________________________________________________________________________________________________________

    Exemplo de sintaxe[2]

        typedef struct {
            char nome[30];
            float matematica, fisica, media;
            
        }Alunos;

        //Declaração de uma variável
        Alunos turma[30];
___________________________________________________________________________________________________________

    Ponteiros 

        É uma variável que armaneza o endereço de memória de outra variavel

        Os ponteiros armazenam nedereços de memoria que aponta para esses valores

        Um ponteiro "aponta" para a localização de uma variável na memoria.

        Normalmente: 
            int n1=2;
        Com ponteiro
            int * numb;
        
        Vantagem: 
            -
            -Eficiência: O uso de ponteiros permite o acesso direto aos valores na memoria, o que ser mais eficiente em termos de tempo de execução e uso de recursos

            - Manipulação de estrutura de dados: Pontweiros são essenciais para manipular estruturas de dados complescas, como listas encadeadas, arvores e grafos. Eles permitem o acesso e a modificação eficiente...
____________________________________
        Função dinamica de memória 

        Quando o tamnho não é conhecido no momento em que escreve o código, mas é fornecido pelo usuário em quanto é executado. Salientando que após a utilização do da função dinâmica, a memória deve ser liberada usando a função "free(inserir_nome_do_ponteiro)"

        Logo, a sintáxe é [ (ponteiro *) malloc(nome_da_variavel * sizeof(nome_elemento_struct)) ]

        Como foi feito no programa da questão 3 da lista 07.

___________________________________________________________________________________________________________

    Pilha estática 

        Busca binária - Algoritmo de ordenação
        É uma estrutura de dados linear que segue a regra do LIFO (last in, First Out) - Último dado a entrar deve ser o primeiro dado a sair.

        Pode ser implementada usando vetores ou structs, com ou sem ponteiros.

        Funções / Operações

        Push - inserir um elemento sempre no topo da pilha.
        Pop - retirar um elemento sempre do topo da pilha.
        PEEK - Retorna o topo da pilha sem realizar nenhuma operação.
        ISEMPTY - Retorna um valor booleano validando se a pilha está vazia.
        ISFULL - Retorna um valor booleano verificando se a pilha está cheia.
            _______________________
            |                      |
            |Utilização de vetores.|
            |______________________|

        Operador de linguagem

            Sizeof - Retorna o tamanho, em bytes, de um tipo de dado ou de uma expressão. Ele é usado para determinar o tamanho de um objeto em tempo de coompilação.

___________________________________________________________________________________________________________

    Alocação de memória dinâmica

        malloc - É usada para alocar memória dinamicamente.
        calloc - inicializa a memória alocada com zeros.
        realloc - redimensiona o tamanho da memória alocada.
        free - Libera o espaço alocado na memória.
___________________________________________________________________________________________________________

    Pilha dinâmica - Conceito

        É uma estrutura de dados composta por um conjunto de elemntos, onde cada elemento possui dois componentes principais: o valor armazenado e um ponteiro para o próximo elemento da pilha.
        O último elemento inserido aponta para NULL, indicando o fim da pilha.